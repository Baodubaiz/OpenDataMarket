// 1. Datasource & Generator
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// 2. Enums
enum Role {
  buyer
  seller
  admin
}

enum PaymentMethod {
  VND
  ETH
}

enum PaymentStatus {
  pending
  completed
  failed
}

enum ConfirmStatus {
  waiting
  confirmed
  failed
}

// 3. Models

model User {
  user_id        String  @id @default(uuid())
  wallet_address String? @unique
  email          String? @unique
  password       String? // chỉ dùng nếu login qua email
  full_name      String?
  phone_number   String? @unique
  bank_account   String? @unique // optional → chỉ cần nếu là dev
  bank_name      String?
  role           Role
  is_active      Boolean  @default(true)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  // Quan hệ
  datasets Dataset[] @relation("UserDatasets") // dev bán datasets
  orders   Order[]   @relation("UserOrders")   // buyer mua datasets
  reviews  Review[]  @relation("UserReviews")  // buyer đánh giá
}

model Category {
  category_id String   @id @default(uuid())
  name        String   @unique
  description String?
  created_at  DateTime @default(now())

  datasets Dataset[]
}

model Dataset {
  dataset_id    String   @id @default(uuid())
  seller_id     String
  category_id   String?
  title         String
  description   String?
  price_vnd     Float?
  price_eth     Float?
  file_url      String
  thumbnail_url String?
  is_active     Boolean   @default(true)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  // Quan hệ
  seller   User      @relation("UserDatasets", fields: [seller_id], references: [user_id])
  category Category? @relation(fields: [category_id], references: [category_id])
  orders   Order[]
  reviews  Review[]
  tags     DatasetTag[]
}

model Order {
  order_id       String        @id @default(uuid())
  buyer_id       String
  dataset_id     String
  payment_method PaymentMethod
  status         PaymentStatus @default(pending)
  total_amount   Float
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  buyer   User     @relation("UserOrders", fields: [buyer_id], references: [user_id])
  dataset Dataset  @relation(fields: [dataset_id], references: [dataset_id])
  txns    Transaction[]
}

model Transaction {
  transaction_id String        @id @default(uuid())
  order_id       String
  tx_hash        String?       // cho ETH
  bank_ref       String? @unique // cho VNĐ
  status         ConfirmStatus @default(waiting)
  created_at     DateTime @default(now())

  order Order @relation(fields: [order_id], references: [order_id])
}

model Review {
  review_id  String   @id @default(uuid())
  buyer_id   String
  dataset_id String
  rating     Int
  comment    String?
  created_at DateTime @default(now())

  buyer   User    @relation("UserReviews", fields: [buyer_id], references: [user_id])
  dataset Dataset @relation(fields: [dataset_id], references: [dataset_id])
}

model Tag {
  tag_id     String   @id @default(uuid())
  name       String   @unique
  created_at DateTime @default(now())

  datasets DatasetTag[]
}

model DatasetTag {
  dataset_id String
  tag_id     String

  dataset Dataset @relation(fields: [dataset_id], references: [dataset_id])
  tag     Tag     @relation(fields: [tag_id], references: [tag_id])

  @@id([dataset_id, tag_id])
}
